#!/usr/bin/env bash
#  ▄▄▄▄· • ▌ ▄ ·. ▪  ▄▄▌   ▄▄· .▄▄ ·   ──────────────────────
#  ▐█ ▀█▪·██ ▐███▪██ ██•  ▐█ ▌▪▐█ ▀.   ╔╦╗╔═╗╔╦╗╔═╗╦╦  ╔═╗╔═╗
#  ▐█▀▀█▄▐█ ▌▐▌▐█·▐█·██ ▪ ██ ▄▄▄▀▀▀█▄   ║║║ ║ ║ ╠╣ ║║  ║╣ ╚═╗
#  ██▄▪▐███ ██▌▐█▌▐█▌▐█▌ ▄▐███▌▐█▄▪▐█  ═╩╝╚═╝ ╩ ╚  ╩╩═╝╚═╝╚═╝
#  ·▀▀▀▀ ▀▀  █▪▀▀▀▀▀▀.▀▀▀ ·▀▀▀  ▀▀▀▀   https://dot.bmilcs.com

#                 PACFIX [./pacfix]

source _bm

_a pacfix

#───────────────────────────────────────────────────  init output file  ───────

paclist=/tmp/pacfix
rm "$paclist"{,.final} 2> /dev/null

#───────────────────────────────────────────────────  course of action  ───────

# no args
if [[ $# == 0 ]]; then

  _a "capturing output: yay -Syyuu"
  yay -Syyuu --noconfirm 2>&1 | tee "$paclist" && _s done

# args contain pacman or yay
elif [[ $* == *"pacman|yay"* ]]; then

  _a "capturing output: \'$*\' (literal) "
  eval "$*" --noconfirm 2>&1 | tee "$paclist" && _s done

elif [[ -e "$*" ]]; then
  paclist="$*"

# args assumed to be package names
else

  _a "fixing broken packages: $*"
  for pkg in "$@"
  do
    _a "adding: $pkg"
    echo "$pkg" >> "$paclist".final
    _s "done"
  done

fi

#──────────────────────────────────────────────────  cleanup raw input   ──────

if [ -s "$paclist" ]; then 

  # debug
  [ $# -gt 0 ] && _w "initial pacman output  [" && cat "$paclist" && _w "]"

  # cleanup pacman/yay output
  _a parsing output for broken packages

  # delete lines not containing 'exists in filesystem'
  sed -i '/exists in filesystem/!d' "$paclist"  

  # debug
  [ $# -gt 0 ] && _w "deleted lines w/o exists in filesystem [" && cat "$paclist" && _w "]"

  # check if any packages remain, after clean-up
  if [ -s "$paclist" ]; then
    _iy "package filesystem errors found!"
  else
    _i "no errors need fixin'"
    _s "done"
    exit 0
  fi

  sed -i 's/\: \/.*//g' "$paclist"
  [ $# -gt 0 ] && _w "sed: package names [" && cat "$paclist" && _w "]"

  awk '!seen[$0]++' "$paclist" > "$paclist".final 
  [ $# -gt 0 ] && _w "final list [" && cat "$paclist".final && _w "]"

  _s "done"

#──────────────────────────────────────────────────  specific packages  ───────

elif [ -n "$paclist".final ]; then
  echo
else
  _e "no output to parse"
  exit 1
fi

#_a pacman: forcing overwrite
_a yay time

while read x; do
  echo "fixing $x"
  yay -S --noconfirm --overwrite "*" "$x" &> /dev/null \
    && echo "> done!"
done <"$paclist".final

# clean up
rm "$paclist"{,.final} 2&>1 /dev/null
