#!/usr/bin/env bash
#  ▄▄▄▄· • ▌ ▄ ·. ▪  ▄▄▌   ▄▄· .▄▄ ·   ──────────────────────
#  ▐█ ▀█▪·██ ▐███▪██ ██•  ▐█ ▌▪▐█ ▀.   ╔╦╗╔═╗╔╦╗╔═╗╦╦  ╔═╗╔═╗
#  ▐█▀▀█▄▐█ ▌▐▌▐█·▐█·██ ▪ ██ ▄▄▄▀▀▀█▄   ║║║ ║ ║ ╠╣ ║║  ║╣ ╚═╗
#  ██▄▪▐███ ██▌▐█▌▐█▌▐█▌ ▄▐███▌▐█▄▪▐█  ═╩╝╚═╝ ╩ ╚  ╩╩═╝╚═╝╚═╝
#  ·▀▀▀▀ ▀▀  █▪▀▀▀▀▀▀.▀▀▀ ·▀▀▀  ▀▀▀▀   https://dot.bmilcs.com

#                 PACFIX [./pacfix]

source _bm

#───────────────────────────────────────────────────  init output file  ───────

paclist=/tmp/pacfix
rm "$paclist"{,.final} &> /dev/null

#───────────────────────────────────────────────────  course of action  ───────

# no args
if [[ $# == 0 ]]; then

  _a "[pacfix] yay -Syyuu"
  yay -Syyuu --noconfirm 2>&1 | tee "$paclist" && _s "done\n"

# pacfix 1
elif [[ $1 == "1" ]]; then

  _a "[pacfix] yay -Syyuu ${RED}DEBUG"
  yay -Syyuu --noconfirm 2>&1 | tee "$paclist" && _s "done\n"
  debug=1

# pacfix ~/list.txt (existing file)
elif [[ -e "$1" ]]; then

  _a "[pacfix] list file: $1"
  paclist="$1"

# pacfix yay -S nginx (direct command)
elif [[ $* == *"pacman|yay"* ]]; then

  _a "[pacfix] command: \'$*\'"
  eval "$*" --noconfirm 2>&1 | tee "$paclist" && _s "done\n"

# pacfix package1 package2 package3
else

  _a "[pacfix] package name"
  for pkg in "$@"
  do
    _a "adding: $pkg"
    echo "$pkg" >> "$paclist".final
    _s "done"
  done

fi

#──────────────────────────────────────────────────  cleanup raw input   ──────

# 
if [ -s "$paclist" ]; then 

  # debug
  [[ $debug == "1" ]] && _wb "initial pacman output  [\n" && cat "$paclist" \
    && echo && _wb "]"

  # cleanup pacman/yay output
  _a parsing output for broken packages

  # delete lines not containing 'exists in filesystem'
  sed -i '/exists in filesystem/!d' "$paclist"  

  [[ $debug == "1" ]] && echo && _w "deleted lines w/o exists in filesystem \
    [\n" && cat "$paclist" && echo && _w "]\n"

  # check if any packages remain, after clean-up
  if [ -s "$paclist" ]; then
    _iy "errors found!\n"
  else
    _i "no errors found"
    _s "done\n"
    exit 0
  fi

  # del text after ": " on all lines
  sed -i 's/\: \/.*//g' "$paclist"

  [[ $debug == "1" ]] && _wg "sed: package names [\n" && cat "$paclist" \
    && echo && _wg "]"

  awk '!seen[$0]++' "$paclist" > "$paclist".final 

  [[ $debug -eq 1 ]] && _wc "final list [\n" && cat "$paclist".final \
    && echo && _wc "]"

  _s "done"

#──────────────────────────────────────────────────  specific packages  ───────

elif [ -n "$paclist".final ]; then
  echo
else
  _e "no output to parse"
  exit 1
fi

#_a pacman: forcing overwrite
_a yay time

while read x; do
  echo "fixing $x"
  yay -S --noconfirm --overwrite "*" "$x" 2&1> /dev/null \
    && echo "> done!"
done <"$paclist".final

# clean up
rm "$paclist"{,.final} 2&>1 /dev/null
