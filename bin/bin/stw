#!/bin/bash
#  ▄▄▄▄· • ▌ ▄ ·. ▪  ▄▄▌   ▄▄· .▄▄ ·   ──────────────────────
#  ▐█ ▀█▪·██ ▐███▪██ ██•  ▐█ ▌▪▐█ ▀.   ╔╦╗╔═╗╔╦╗╔═╗╦╦  ╔═╗╔═╗
#  ▐█▀▀█▄▐█ ▌▐▌▐█·▐█·██ ▪ ██ ▄▄▄▀▀▀█▄   ║║║ ║ ║ ╠╣ ║║  ║╣ ╚═╗
#  ██▄▪▐███ ██▌▐█▌▐█▌▐█▌ ▄▐███▌▐█▄▪▐█  ═╩╝╚═╝ ╩ ╚  ╩╩═╝╚═╝╚═╝
#  ·▀▀▀▀ ▀▀  █▪▀▀▀▀▀▀.▀▀▀ ·▀▀▀  ▀▀▀▀   https://dot.bmilcs.com
#────────────────────────────────────────────────────────────
#   my custom stow-ifier              
#────────────────────────────────────────────────────────────

# TODO: filename argument passed
# TODO: iteration, y/n per each file
# TODO: check if symlink, skip if so

source _head

_t bmilcs stow prepper

#
# EXTRACT DATA
#

cdir=$(pwd)
bdir=$(pwd | sed 's/\/home\/.*\/\(.*\)/\1/')
nbdir=${bdir,,}
idir=$(pwd | sed 's/\/home\/'$USER'\/\(.*\)/\1/')
ndir=$D/$nbdir/$idir

# debugging  
# set -x  # debugging
#  _i bdir: $bdir 
#  _i nbdir: $nbdir 
#  _i idir: $idir
#  _i ndir: $ndir 
#  _i dot dir: $D

#
# NO ARGUMENTS
#

# DIR STRUCTURE CHECK
  if [[ $bdir == *"home"* ]]; then
    _w \$HOME\ - really?
    exit 1
  # in dotfile repo dir?
  elif [[ $cdir == $D* ]]; then
    _w stow your stow - really?
    exit 1
  fi

  # does dir exist already?
  if [ -d "$ndir" ]; then
    _i sweet. $ndir already exists
  else
    _a creating $ndir
    mkdir -p $ndir
    if [ -d $ndir ]; then
      _s successfully created: ../$nbdir/$idir
    else
      _e something went wrong. unable to create folder.
      exit 3
    fi
  fi


# STOW EVERYTHING?
if [ $# -eq 0 ] ; then
  _a "looping through dir"
  if [ $? == "1" ];then _s all set ; exit 0;fi
  loopz="*"
else
  loopz="$@"
fi



  # LOOP OVER DIR
  for d in $loopz ; do
    
    # CHECK FOR ISSUES
    if [ -L $d ];then
      _w skipped $d: symlink
      continue
    elif [ $d == *.log ];then
      _w skipped $d: log
      continue
    elif [ -d $d ]; then
      _e skipped $d: directory
      continue
    elif [ -f $ndir/$d ]; then
      _ask "overwrite existing $d??"
      if [ $? == "1" ]; then _w skipping $d: declined; continue; fi
      mv $ndir/$d $ndir/$d.bak
    else 
      _ask "add $d to repo?"
      if [ $? == "1" ];then _w skipping $d; continue; fi
    fi

    # PASSED ISSUE TEST
    # create backup directory
    mkdir -p $BAK/$bdir
    _o copying \"$d\" to \"../$nbdir/$idir\"
    cp $d $ndir/$d 2>/dev/null


    if [ -f $ndir/$d ]; then
      _s
      rm $ndir/$d.bak 2>/dev/null
      mv $d $BAK/$bdir/$d-$DATE
    else
      _e copy failed! emergency exit.
      mv $ndir/$d.bak $ndir/$d 2>/dev/null
      exit 1
    fi 
  done

#
# ARGUMENT TIME
#

#else
#
#  if [[ $bdir == *"home"* ]]; then
#    _w \$HOME - category needed. manual intervention required.
#    exit 1
#  # in dotfile repo dir?
#  elif [[ $cdir == $D* ]]; then
#    _w stow your stow - really?
#    exit 1
#  # does dir exist already?
#  elif [ -d "$ndir" ]; then
#    _a $ndir already exists - sweet.
#  else
#    _a creating $ndir
#    mkdir -p $ndir
#    if [ -d $ndir ]; then
#      _s successfully created: ../$nbdir/$idir
#    else
#      _e something went wrong. unable to create folder.
#      exit 3
#    fi
#  fi
#
#
#  for f in $@ ; do
#    echo $f
#    # CHECK FOR ISSUES
#    if [ -L $f ];then
#      _w skipped $f: symlink
#      continue
#    elif [ $f == *.log ];then
#      _w skipped $f: log
#      continue
#    elif [ -d $f ]; then
#      _e skipped $f: directory
#      continue
#    elif [ -f $ndir/$f ]; then
#      _ask "overwrite existing $f??"
#      if [ $? == "1" ]; then
#        _w skipping $f: declined
#        continue
#      fi
#      mv $ndir/$f $ndir/$f.bak
#    else 
#      _ask add ${f} to repo?
#      if [ $? == "1" ];then
#      _w skipping $f
#      continue
#      fi
#    fi
#
#    # PASSED ISSUE TEST
#    mkdir -p $BAK/$bdir
#    _o copying \"$f\" to \"../$nbdir/$idir\"
#    cp -r $f $ndir/$f 2>/dev/null
#    if [ -f $ndir/$f ]; then
#      _s
#      rm $ndir/$f.bak 2>/dev/null
#      mv $f $BAK/$bdir/$f-$DATE
#    else
#      _e copy failed! emergency exit.
#      mv $ndir/$f.bak $ndir/$f 2>/dev/null
#      exit 1
#    fi 
#  done

# arg passed
# TODO INSERT HERE


# 
# CREATE SYMLINKS
#

_a stow time!
cd $D
stow -R $nbdir
[[ $? != 0 ]] && _e something went wrong
_s success \!


