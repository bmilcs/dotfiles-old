#!/bin/sh
#  ▄▄▄▄· • ▌ ▄ ·. ▪  ▄▄▌   ▄▄· .▄▄ ·   ──────────────────────
#  ▐█ ▀█▪·██ ▐███▪██ ██•  ▐█ ▌▪▐█ ▀.   ╔╦╗╔═╗╔╦╗╔═╗╦╦  ╔═╗╔═╗
#  ▐█▀▀█▄▐█ ▌▐▌▐█·▐█·██ ▪ ██ ▄▄▄▀▀▀█▄   ║║║ ║ ║ ╠╣ ║║  ║╣ ╚═╗
#  ██▄▪▐███ ██▌▐█▌▐█▌▐█▌ ▄▐███▌▐█▄▪▐█  ═╩╝╚═╝ ╩ ╚  ╩╩═╝╚═╝╚═╝
#  ·▀▀▀▀ ▀▀  █▪▀▀▀▀▀▀.▀▀▀ ·▀▀▀  ▀▀▀▀   https://dot.bmilcs.com
#────────────────────────────────────────────────────────────
#   global shell/script/function stuff
#────────────────────────────────────────────────────────────
# TODO: CLEAN UP PARAMETER : \& \: \= \|

# clear screen on script launch
clear

#────────────────────────────────────────────────────────────
# COLORS
#────────────────────────────────────────────────────────────

NC='\033[0m'
B='\033[1m'
DIM='\033[2m'
ITAL='\033[3m'
UL='\033[4m'
BLINK='\033[5m'
INV='\033[7m'
BLK=${NC}'\033[30m'
RED=${NC}'\033[31m'
GRN=${NC}'\033[32m'
YLW=${NC}'\033[33m'
BLU=${NC}'\033[34m'
PUR=${NC}'\033[35m'
CYN=${NC}'\033[36m'
WHT=${NC}'\033[37m'
TIME="$(date +"%I:%M %P")"
DATE="$(date +"%Y-%m-%d")"

#────────────────────────────────────────────────────────────
# PROMPTS
#────────────────────────────────────────────────────────────

_ask() {
  while true; do
    default=y
    # ask the question (not using "read -p" as it uses stderr not stdout)
    _q "$* ${YLW}${B}[y|n]${NC} "

    # read the answer (use /dev/tty in case stdin is redirected from somewhere else)
    read -r reply </dev/tty

    # default?
    if [ -z "$reply" ]; then
        reply=$default
    fi

    # check if the reply is valid
    case "$reply" in
      ""|Y*|y*) _i yes; return 0 ;;
      N*|n*) _i no; return 1 ;;
    esac

  done
  }

#────────────────────────────────────────────────────────────
# OUTPUT
#────────────────────────────────────────────────────────────

# TODO  parse parameters for illegal symbol &
# msg=${echo $*| sed -e 's/\&/\\\&/g'}
# echo $msg
spaces=" "


# titlebar
_t() {
# 

  chr="\xE2\x94\x80"
  s=⎨  #❯⎨ 
  p=⎬  #❮⎬ 
  t=  #❮⎬
  q=  #❯⎨ 
  toadd=0 
  tada=

  cols=$(tput cols)
  string=$*
  strlen=${#string}
  prelen=${#p}
  toadd=$(( $cols - $strlen - 16 ))

  for i in $(seq 1 $toadd); do
    tada="${tada}${chr}"
  done

  printf "${BLU}$p"
  printf "${chr}%.0s" {1..3}
  if [[ $# -gt 0 ]]; then
    printf "${t}${GRN}${B} $string ${BLU}${q}" && toadd=$(( $toadd-2 )); fi
  printf $tada
#  eval $(echo printf '"x"' {1..$toadd}) 
  printf "${chr}%.0s" {1..3}
  printf "${BLU}${B}bm${BLU}"
  printf "${chr}%.0s" {1..2}
  printf "$s${NC}\n"
  }

# title
_tt() {
  echo -e "${CYN}[ ${B}$* ${CYN}]${NC}"
  }

# announce
_a() {
  echo -e "\n${CYN}${B}[${CYN}$*${CYN}${B}]${NC}"
  }

# announce [plain]
_aa() {
  echo -e "\n${B}[${NC}$*${B}]${NC}"
  }

# question
_q() {
  printf "\n${PUR}${B}[?]${PUR} $* "
  }

# output
_o() {
  echo -e "$spaces${WHT}$*${NC}"
  }

# inform
_i() {
  echo -e "${spaces}${WHT}${B}-${WHT} $* ${NC}"
  }

# warn
_w() {
  echo -e "$spaces${YLW}[!] $* ${NC}"
  }

_w2() {
  echo -e "$spaces${YLW}[!] $* ${NC}"
  }

# success
_s() {
  if [ $# -eq 0 ] ; then 
    echo -e "$spaces${GRN} done${NC}"
  else 
    echo -e "$spaces${GRN} $* ${NC}" # √
  fi 
  }

# error
_e() {
  if [ $# -eq 0 ] ; then
    echo -e "$spaces${RED}${RED}${B} error${NC}"
  else
    echo -e "$spaces${RED}${RED}${B} ${NC}${RED}$*" # X
  fi
  }

		#echo some text
#		printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

		#echo some text

#	pad=$(printf '%0.1s' '-'{1..60})
#	padlength=40
#	string2='bbbbbbb'
#	for string1 in a aa aaaa aaaaaaaa
#	do
#			 printf '%s' "$string1 "
#			 printf '%*.*s' 0 $((padlength - ${#string1} - ${#string2} )) "$pad"
#			 printf '%s\n' " $string2"
#			 string2=${string2:1}
#	done

#	pad=$(printf '%0.1s' '-'{1..60})
#	padlength=40
#	string2='bbbbbbb'
#	for string1 in a aa aaaa aaaaaaaa
#	do
#			 printf '%s' "$string1 "
#			 printf '%*.*s' 0 $((padlength - ${#string1} - ${#string2} )) "$pad"
#			 printf '%s\n' " $string2"
#			 string2=${string2:1}
#	done
