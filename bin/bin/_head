#!/usr/bin/env bash
#  ▄▄▄▄· • ▌ ▄ ·. ▪  ▄▄▌   ▄▄· .▄▄ ·   ──────────────────────
#  ▐█ ▀█▪·██ ▐███▪██ ██•  ▐█ ▌▪▐█ ▀.   ╔╦╗╔═╗╔╦╗╔═╗╦╦  ╔═╗╔═╗
#  ▐█▀▀█▄▐█ ▌▐▌▐█·▐█·██ ▪ ██ ▄▄▄▀▀▀█▄   ║║║ ║ ║ ╠╣ ║║  ║╣ ╚═╗
#  ██▄▪▐███ ██▌▐█▌▐█▌▐█▌ ▄▐███▌▐█▄▪▐█  ═╩╝╚═╝ ╩ ╚  ╩╩═╝╚═╝╚═╝
#  ·▀▀▀▀ ▀▀  █▪▀▀▀▀▀▀.▀▀▀ ·▀▀▀  ▀▀▀▀   https://dot.bmilcs.com
#                 MY SILLY SCRIPT HEADER [./_head]
#────────────────────────────────────────────────────────────

# color var
NC='\033[0m'
B='\033[1m'
DIM='\033[2m'
ITAL='\033[3m'
UL='\033[4m'
BLINK='\033[5m'
INV='\033[7m'
BLK=${NC}'\033[30m'
RED=${NC}'\033[31m'
GRN=${NC}'\033[32m'
YLW=${NC}'\033[33m'
BLU=${NC}'\033[34m'
PUR=${NC}'\033[35m'
CYN=${NC}'\033[36m'
WHT=${NC}'\033[37m'
TIME=$(date '+%I:%M %P')
DATE=$(date '+%Y-%m-%d')
MONTH=$(date '+%B')
DAY=$(date '+%d')
DAYOFWEEK=$(date '+%A')

#────────────────────────────────────────────────────────────
# INPUT
#────────────────────────────────────────────────────────────

_askk() {
  while true; do
    default=y
    # ask the question (not using "read -p" as it uses stderr not stdout)
    echo -e "${color}${B}  ${color}$* ${B}[y|n]${NC} "

    # read the answer (use /dev/tty in case stdin is redirected from somewhere else)
    read -r reply < /dev/tty

    # default?
    if [ -z "$reply" ]; then
      reply=$default
    fi

    # check if the reply is valid
    case "$reply" in
      "" | Y* | y*)
        _i yes
        return 0
        ;;
      N* | n*)
        _i no
        return 1
        ;;
    esac

  done
}

_ask()  { color="$PUR";   _askk "$*"; }
_askr() { color="$RED";   _askk "$*"; }
_asky() { color="$YLW";   _askk "$*"; }
_askg() { color="$GRN";   _askk "$*"; }
_askb() { color="$BLU";   _askk "$*"; }
_askc() { color="$CYN";   _askk "$*"; }
_askw() { color="$WHT";   _askk "$*"; }

#────────────────────────────────────────────────────────────
# OUTPUT
#────────────────────────────────────────────────────────────

# TODO  parse parameters for illegal symbol &
# msg=${echo $*| sed -e 's/\&/\\\&/g'}

# echo $msg
spaces=" "

# titlebar
_tt() {

  chr="\xE2\x94\x80"
  # 
  s=⎨ #❯⎨ 
  p=⎬ #❮⎬ 
  t= #❮⎬
  q= #❯⎨
  toadd=0
  tada=
  nick=bmilcs

  nicklen=${#nick}
  cols=$(tput cols)
  string=$*
  strlen=${#string}
  prelen=${#p}
  toadd=$((cols - strlen - nicklen - 16))

  for i in $(seq 1 $toadd); do
    tada="${tada}${chr}"
  done

  printf "\n$BLU$p"
  printf "${chr}%.0s" {1..3}
  if [[ $# -gt 0 ]]; then
    printf "${t}${color}${B} $string ${BLU}${q}" && toadd=$(($toadd - 2))
  fi
  printf $tada
  #  eval $(echo printf '"x"' {1..$toadd})
  printf "${chr}%.0s" {1..3}
  printf "${BLU}${B} "$nick" ${BLU}"
  printf "${chr}%.0s" {1..2}
  printf "$s${NC}\n"
}

_t()  { color="$CYN";   _tt "$*"; }
_tr() { color="$RED";   _tt "$*"; }
_ty() { color="$YLW";   _tt "$*"; }
_tg() { color="$GRN";   _tt "$*"; }
_tb() { color="$BLU";   _tt "$*"; }
_tp() { color="$PUR";   _tt "$*"; }
_tw() { color="$WHT";   _tt "$*"; }


# announce
_aa() {
  echo -e "\n${color}${B}[${color}$*${color}${B}]${NC}"
}
_a()  { color="$CYN";   _aa "$*"; }
_ar() { color="$RED";   _aa "$*"; }
_ay() { color="$YLW";   _aa "$*"; }
_ag() { color="$GRN";   _aa "$*"; }
_ab() { color="$BLU";   _aa "$*"; }
_ap() { color="$PUR";   _aa "$*"; }
_aw() { color="$WHT";   _aa "$*"; }


# output
_oo() {
  echo -e "$spaces${color}$*${NC}"
}
_o()  { color="$WHT";   _oo "$*"; }
_or() { color="$RED";   _oo "$*"; }
_oy() { color="$YLW";   _oo "$*"; }
_og() { color="$GRN";   _oo "$*"; }
_ob() { color="$BLU";   _oo "$*"; }
_op() { color="$PUR";   _oo "$*"; }
_oc() { color="$CYN";   _oo "$*"; }

# inform
_ii() {
  echo -e "${spaces}${color}  $* ${NC}"
}
_i()  { color="$WHT";   _ii "$*"; }
_ir() { color="$RED";   _ii "$*"; }
_iy() { color="$YLW";   _ii "$*"; }
_ig() { color="$GRN";   _ii "$*"; }
_ib() { color="$BLU";   _ii "$*"; }
_ip() { color="$PUR";   _ii "$*"; }
_ic() { color="$CYN";   _ii "$*"; }

# warn
_www() {
  echo -e "$spaces${color}${B} ${color} $* ${NC}"
}
_w()  { color="$YLW";   _www "$*"; }
_wr() { color="$RED";   _www "$*"; }
_ww() { color="$WHT";   _www "$*"; }
_wg() { color="$GRN";   _www "$*"; }
_wb() { color="$BLU";   _www "$*"; }
_wp() { color="$PUR";   _www "$*"; }
_wc() { color="$CYN";   _www "$*"; }

# success
_ss() {
  if [ $# -eq 0 ]; then
    echo -e "$spaces${color}  done${NC}"
  else
    echo -e "$spaces${color}  $* ${NC}" # √
  fi
}
_s()  { color="$GRN";   _ss "$*"; }
_sr() { color="$RED";   _ss "$*"; }
_sw() { color="$WHT";   _ss "$*"; }
_sy() { color="$YLW";   _ss "$*"; }
_sb() { color="$BLU";   _ss "$*"; }
_sp() { color="$PUR";   _ss "$*"; }
_sc() { color="$CYN";   _ss "$*"; }


# error
_ee() {
  if [ $# -eq 0 ]; then
    echo -e "$spaces${color}${color}  error${NC}"
  else
    echo -e "$spaces${color}${color}  ${color}$*" # X
  fi
}
_e()  { color="$RED";   _ee "$*"; }
_eg() { color="$GRN";   _ee "$*"; }
_ew() { color="$WHT";   _ee "$*"; }
_ey() { color="$YLW";   _ee "$*"; }
_eb() { color="$BLU";   _ee "$*"; }
_ep() { color="$PUR";   _ee "$*"; }
_ec() { color="$CYN";   _ee "$*"; }


#echo some text
#		printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

#echo some text

#	pad=$(printf '%0.1s' '-'{1..60})
#	padlength=40
#	string2='bbbbbbb'
#	for string1 in a aa aaaa aaaaaaaa
#	do
#			 printf '%s' "$string1 "
#			 printf '%*.*s' 0 $((padlength - ${#string1} - ${#string2} )) "$pad"
#			 printf '%s\n' " $string2"
#			 string2=${string2:1}
#	done

#	pad=$(printf '%0.1s' '-'{1..60})
#	padlength=40
#	string2='bbbbbbb'
#	for string1 in a aa aaaa aaaaaaaa
#	do
#			 printf '%s' "$string1 "
#			 printf '%*.*s' 0 $((padlength - ${#string1} - ${#string2} )) "$pad"
#			 printf '%s\n' " $string2"
#			 string2=${string2:1}
#	done
