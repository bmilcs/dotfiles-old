#!/usr/bin/env bash
#  ▄▄▄▄· • ▌ ▄ ·. ▪  ▄▄▌   ▄▄· .▄▄ ·   ──────────────────────
#  ▐█ ▀█▪·██ ▐███▪██ ██•  ▐█ ▌▪▐█ ▀.   ╔╦╗╔═╗╔╦╗╔═╗╦╦  ╔═╗╔═╗
#  ▐█▀▀█▄▐█ ▌▐▌▐█·▐█·██ ▪ ██ ▄▄▄▀▀▀█▄   ║║║ ║ ║ ╠╣ ║║  ║╣ ╚═╗
#  ██▄▪▐███ ██▌▐█▌▐█▌▐█▌ ▄▐███▌▐█▄▪▐█  ═╩╝╚═╝ ╩ ╚  ╩╩═╝╚═╝╚═╝
#  ·▀▀▀▀ ▀▀  █▪▀▀▀▀▀▀.▀▀▀ ·▀▀▀  ▀▀▀▀   https://dot.bmilcs.com
#                 MY SILLY SCRIPT HEADER [./_bm]
#────────────────────────────────────────────────────────────

# text mods
NC='\033[0m';    B='\033[1m';   DIM='\033[2m';  UL='\033[4m'
BLINK='\033[5m'; INV='\033[7m'; ITAL='\033[3m';

# colors
BLK=${NC}'\033[30m'; RED=${NC}'\033[31m'
GRN=${NC}'\033[32m'; YLW=${NC}'\033[33m'; BLU=${NC}'\033[34m'
PUR=${NC}'\033[35m'; CYN=${NC}'\033[36m'; WHT=${NC}'\033[37m'

# bg
BBC=${NC}'\e[1;36;40m'

# time/date | TODO: fix execution on command run
TIME=$(date '+%I:%M %P'); DATE=$(date '+%Y-%m-%d')
MONTH=$(date '+%B');      DAY=$(date '+%d');       DAYOFWEEK=$(date '+%A')

#──────────────────────────────────────────────────────────────────────────────
#─────────────────────────────────────────────────────────  BLANK LINE  ───────
#──────────────────────────────────────────────────────────────────────────────

_blank(){
  if [[ $# == 0 ]]; then
    count="1"
  else
    count="$*"
  fi
  
  for i in $(seq $count); do
    echo
  done
}

#────────────────────────────────────────────────────────────
# INPUT
#────────────────────────────────────────────────────────────

_askk() {
  local prompt default reply
  if [[ ${2:-} = 'Y' ]]; then
      prompt="${NC}${B}Y${color}|n"
      default='Y'
  elif [[ ${2:-} = 'N' ]]; then
      prompt="y|${NC}${B}N${color}"
      default='N'
  else
      prompt="y/n"
      default=''
  fi
  while true; do
    # ask the question
    _qq "$1 ${color}[$prompt]${NC}"
    # read the answer
    read -r reply #< /dev/tty
    # default?
    [ -z "$reply" ] && reply=$default
    # check if the reply is valid
    case "$reply" in
      Y* | y*) _i yes; return 0 ;;
      N* | n*) _i no; return 1 ;;
    esac
  done
}

_qq() { 
  echo -e "\n${B}${color}  ${1}" 
}

_pp() {
  echo -e "${B}${color}  $@" 
  read -p "$*"":  " value
  echo $value
}

_askn()  { color="${PUR}"; _askk "$*" N; }
_asknr() { color="${RED}"; _askk "$*" N; }
_askny() { color="${YLW}"; _askk "$*" N; }
_askng() { color="${GRN}"; _askk "$*" N; }
_asknb() { color="${BLU}"; _askk "$*" N; }
_asknc() { color="${CYN}"; _askk "$*" N; }
_asknw() { color="${WHT}"; _askk "$*" N; }

_ask()   { color="${PUR}"; _askk "$*" Y; }
_askr()  { color="${RED}"; _askk "$*" Y; }
_asky()  { color="${YLW}"; _askk "$*" Y; }
_askg()  { color="${GRN}"; _askk "$*" Y; }
_askb()  { color="${BLU}"; _askk "$*" Y; }
_askc()  { color="${CYN}"; _askk "$*" Y; }
_askw()  { color="${WHT}"; _askk "$*" Y; }

_q()     { color="${PUR}"; _qq "$*"; }
_qr()    { color="${RED}"; _qq "$*"; }
_qy()    { color="${YLW}"; _qq "$*"; }
_qg()    { color="${GRN}"; _qq "$*"; }
_qb()    { color="${BLU}"; _qq "$*"; }
_qc()    { color="${CYN}"; _qq "$*"; }
_qw()    { color="${WHT}"; _qq "$*"; }

_p()     { color="${PUR}"; _pp "$*"; }
_pr()    { color="${RED}"; _pp "$*"; }
_py()    { color="${YLW}"; _pp "$*"; }
_pg()    { color="${GRN}"; _pp "$*"; }
_pb()    { color="${BLU}"; _pp "$*"; }
_pc()    { color="${CYN}"; _pp "$*"; }
_pw()    { color="${WHT}"; _pp "$*"; }

#────────────────────────────────────────────────────────────
# OUTPUT
#────────────────────────────────────────────────────────────

 spaces=" "

# titlebar
_tt() {

  chr="\xE2\x94\x80"
  s=" " #⎨❯⎨   #        
  p=" " #⎬❮⎬ 
  t= #❮⎬
  q= #❯⎨
  toadd=0
  tada=
  nick=BM

  nicklen=${#nick}
  cols=$(tput cols)
  string=$*
  strlen=${#string}
  prelen=${#p}
  toadd=$((cols - strlen - nicklen - 16))

  for i in $(seq 1 $toadd); do
    tada="${tada}${chr}"
  done

  printf "\n$BLU$p"
  printf "${chr}%.0s" {1..3}
  [[ $# -gt 0 ]] \
    && printf "${t}${color}${B} $string ${BLU}${q}" && toadd=$(($toadd - 2))
  printf $tada
  printf "${chr}%.0s" {1..3}
  printf "${BLU}${B} "$nick" ${BLU}"
  printf "${chr}%.0s" {1..2}
  printf "$s${NC}\n"
}

_t()  { color="$CYN";   _tt "$*"; }
_tr() { color="$RED";   _tt "$*"; }
_ty() { color="$YLW";   _tt "$*"; }
_tg() { color="$GRN";   _tt "$*"; }
_tb() { color="$BLU";   _tt "$*"; }
_tp() { color="$PUR";   _tt "$*"; }
_tw() { color="$WHT";   _tt "$*"; }

# announce
_aa() { echo -e "\n${color}${B}$*${NC}"; }
_a()  { color="$CYN";   _aa "$*"; }
_ar() { color="$RED";   _aa "$*"; }
_ay() { color="$YLW";   _aa "$*"; }
_ag() { color="$GRN";   _aa "$*"; }
_ab() { color="$BLU";   _aa "$*"; }
_ap() { color="$PUR";   _aa "$*"; }
_aw() { color="$WHT";   _aa "$*"; }

# output
_oo() { echo -e "$spaces${color}$*${NC}"; }
_o()  { color="$WHT";   _oo "$*"; }
_or() { color="$RED";   _oo "$*"; }
_oy() { color="$YLW";   _oo "$*"; }
_og() { color="$GRN";   _oo "$*"; }
_ob() { color="$BLU";   _oo "$*"; }
_op() { color="$PUR";   _oo "$*"; }
_oc() { color="$CYN";   _oo "$*"; }

# output
_ff() { echo -e "$spaces${color}  $*${NC}"; }
_f()  { color="$WHT";   _ff "$*"; }
_fr() { color="$RED";   _ff "$*"; }
_fy() { color="$YLW";   _ff "$*"; }
_fg() { color="$GRN";   _ff "$*"; }
_fb() { color="$BLU";   _ff "$*"; }
_fp() { color="$PUR";   _ff "$*"; }
_fc() { color="$CYN";   _ff "$*"; }

# inform
_ii() { echo -e "${spaces}${color}  $* ${NC}"; }
_i()  { color="$WHT";   _ii "$*"; }
_ir() { color="$RED";   _ii "$*"; }
_iy() { color="$YLW";   _ii "$*"; }
_ig() { color="$GRN";   _ii "$*"; }
_ib() { color="$BLU";   _ii "$*"; }
_ip() { color="$PUR";   _ii "$*"; }
_ic() { color="$CYN";   _ii "$*"; }

# warn
_www() { echo -e "$spaces${color}${B} ${color} $* ${NC}"; }
_w()  { color="$YLW";   _www "$*"; }
_wr() { color="$RED";   _www "$*"; }
_ww() { color="$WHT";   _www "$*"; }
_wg() { color="$GRN";   _www "$*"; }
_wb() { color="$BLU";   _www "$*"; }
_wp() { color="$PUR";   _www "$*"; }
_wc() { color="$CYN";   _www "$*"; }

# success
_scs() { echo -e "$spaces${color}  ${*:-done} \n${NC}"; } # √
_s()  { color="$GRN";   _scs "$*"; }
_sr() { color="$RED";   _scs "$*"; }
_sw() { color="$WHT";   _scs "$*"; }
_sy() { color="$YLW";   _scs "$*"; }
_sb() { color="$BLU";   _scs "$*"; }
_sp() { color="$PUR";   _scs "$*"; }
_sc() { color="$CYN";   _scs "$*"; }

# error
_ee() { echo -e "$spaces${color}ﲅ${color}  ${*:-error}${NC}"; }
_e()  { color="$RED";   _ee "$*"; }
_eg() { color="$GRN";   _ee "$*"; }
_ew() { color="$WHT";   _ee "$*"; }
_ey() { color="$YLW";   _ee "$*"; }
_eb() { color="$BLU";   _ee "$*"; }
_ep() { color="$PUR";   _ee "$*"; }
_ec() { color="$CYN";   _ee "$*"; }

#────────────────────────────────────────────────────────────
# NOTIFICATIONS
#────────────────────────────────────────────────────────────

_n() {
notify-send \
  --category="bmnormal"       \
  --urgency="low"             \
  --icon="pan-start-symbolic" \
  " $(basename $0) "   \
  "$1"
}

_nw() {
notify-send                        \
  --category="bmwarning"           \
  --urgency="low"                  \
  --icon="mail-mark-junk-symbolic" \
  " $(basename $0) "               \
  "$1"
}

_ne() {
notify-send                      \
  --category="bmerror"           \
  --urgency="low"                \
  --icon="window-close-symbolic" \
  " $(basename $0) "             \
  "$*"
}

_ns() {
notify-send                       \
  --category="bmsuccess"          \
  --urgency="low"                 \
  --icon="object-select-symbolic" \
  " $(basename $0) "              \
  "$*"
}

_nimg() {
notify-send \
  --category="bmscreenshot"   \
  --icon="$1"                 \
  "$2"                        \
  "$3"
}

# echo some text
#		printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

#echo some text

#	pad=$(printf '%0.1s' '-'{1..60})
#	padlength=40
#	string2='bbbbbbb'
#	for string1 in a aa aaaa aaaaaaaa
#	do
#			 printf '%s' "$string1 "
#			 printf '%*.*s' 0 $((padlength - ${#string1} - ${#string2} )) "$pad"
#			 printf '%s\n' " $string2"
#			 string2=${string2:1}
#	done

#	pad=$(printf '%0.1s' '-'{1..60})
#	padlength=40
#	string2='bbbbbbb'
#	for string1 in a aa aaaa aaaaaaaa
#	do
#			 printf '%s' "$string1 "
#			 printf '%*.*s' 0 $((padlength - ${#string1} - ${#string2} )) "$pad"
#			 printf '%s\n' " $string2"
#			 string2=${string2:1}
#	done
