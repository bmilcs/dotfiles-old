#!/usr/bin/env bash
#  ▄▄▄▄· • ▌ ▄ ·. ▪  ▄▄▌   ▄▄· .▄▄ ·   ──────────────────────
#  ▐█ ▀█▪·██ ▐███▪██ ██•  ▐█ ▌▪▐█ ▀.   ╔╦╗╔═╗╔╦╗╔═╗╦╦  ╔═╗╔═╗
#  ▐█▀▀█▄▐█ ▌▐▌▐█·▐█·██ ▪ ██ ▄▄▄▀▀▀█▄   ║║║ ║ ║ ╠╣ ║║  ║╣ ╚═╗
#  ██▄▪▐███ ██▌▐█▌▐█▌▐█▌ ▄▐███▌▐█▄▪▐█  ═╩╝╚═╝ ╩ ╚  ╩╩═╝╚═╝╚═╝
#  ·▀▀▀▀ ▀▀  █▪▀▀▀▀▀▀.▀▀▀ ·▀▀▀  ▀▀▀▀   https://dot.bmilcs.com
#                 UPDATE DOTFILES TEST [./updf]
#────────────────────────────────────────────────────────────

source _head
_t dotfiles 

#────────────────────────────────────────────────────────────
# PULL DOTFILE UPDATES IF CLEAN GS
#────────────────────────────────────────────────────────────

D="${D:-/home/bmilcs/bm}"
g="git --git-dir="$D"/.git"
clean="$(git --git-dir="$D"/.git status | grep "clean")"

_a local health
_i checking for undocumented changes

if [[ ! -z "$clean" ]] ; then

  _s clean: no action necessary

  _a update check
  _i comparing local vs remote dotfiles
  $g remote update # hide this afterward

  if [[ "$($g status -uno)" == *"ahead"* ]]; then
    _w "ahead of origin/main"
    _a pushing changes
    _i updating remote dotfiles repo "\n"
    $g push \
    && echo && _s

  elif [[ "$($g status -uno)" == *"behind"* ]]; then
    _w "behind origin/main"
    _a git pull
    _i updating local dotfiles "\n"
    $g pull \
    && echo && _s
  else
    _s "up-to-date": no action necessary
  fi
else
  _e dirty: unable to proceed
  _aa todo
  _i commit local changes "\n"

  $g status -s && echo

  _s done "\n"
fi
