#!/usr/bin/env bash
#  ▄▄▄▄· • ▌ ▄ ·. ▪  ▄▄▌   ▄▄· .▄▄ ·   ──────────────────────
#  ▐█ ▀█▪·██ ▐███▪██ ██•  ▐█ ▌▪▐█ ▀.   ╔╦╗╔═╗╔╦╗╔═╗╦╦  ╔═╗╔═╗
#  ▐█▀▀█▄▐█ ▌▐▌▐█·▐█·██ ▪ ██ ▄▄▄▀▀▀█▄   ║║║ ║ ║ ╠╣ ║║  ║╣ ╚═╗
#  ██▄▪▐███ ██▌▐█▌▐█▌▐█▌ ▄▐███▌▐█▄▪▐█  ═╩╝╚═╝ ╩ ╚  ╩╩═╝╚═╝╚═╝
#  ·▀▀▀▀ ▀▀  █▪▀▀▀▀▀▀.▀▀▀ ·▀▀▀  ▀▀▀▀   https://dot.bmilcs.com
#                 MAKE BIN FILE [./mbin]
#────────────────────────────────────────────────────────────
source _bm
name=$1

cleanexit() {
  if [[ -f "$name" ]] && [[ -w "$name" ]] && [[ $(wc -c $name) == "0 $name" ]]
  then
    echo -e "\n"
    _wr emergency exit
    _f cleanup
    rm "$name" && _s
  fi
  exit 1
}

trap 'cleanexit' 1 2 3 9 15 

_t bin maker
_a parsing arguments

# were args passed?
if [[ -z $name ]]; then
  _o "filename: ${RED}???\n"
  _w missing argument
  _e unable to proceed\\n
  exit 1
else
  _o filename: "$name"
  _s
fi

bpath="$(pwd)/$name"

# in /bin?
if [[ ! $bpath == */bin/* ]]; then
  _w "current path: $bpath"
  _ask "do you want to create this script within ${B}~/bin instead?" \
    && cd ~/bin || (_e "unable to change dir to ~/bin" && exit 1)
fi


# does it exist already?
_a existing file check
if [[ -f $name ]]; then

  _w \'"$name"\' already exists!

  # is it a useless file?
  if [[ "$(wc -c "$name")" == "0 $name" ]]; then
    _f "${B}however, it is empty (size 0 kb)"
    _f deleting \'$name\'
    rm "$name" || { _w unable to delete; _e unable to proceed\\n; exit 1; }
    _s done \\n
  else
    _w "${B}NOT empty"
    _e unable to proceed\\n
    exit 1
  fi
else
  _f all clear\\n

fi
# create file
_oc "creating file"
touch "$name"
if [[ ! -f "$name" ]]; then
  _e unable to create "$name" 
  exit 1
else
  _s done
fi

while [[ -z $title ]]; do
  _qy please enter a title: 
  read title
done

# add logo
logo "$name" "$title"

# add header/title
echo -e '
source _bm

#────────────────────────────────────────────────────────  parse input  ───────

usage() { 
  (_oc "$(basename $0)"
   _oy   -n   name
   _oy   -c   cmd
   _o    -f   config
  ) 1>&2
  exit 1
}

while getopts "n:c:f" opt; do
  case "${opt}" in
    n) name=${OPTARG} ;;
    c) cmd=${OPTARG} ;;
    f) cfg="1" ;;
    *) usage ;;
  esac
done

if [ -z "${name}" ] || [ -z "${cmd}" ]; then
  usage
fi

#──────────────────────────────────────────────────────────────  begin  ───────

_tb '"$title"'

' >> "$name" 

# add shebang
sed -i '1s/^/\#\!\/usr\/bin\/env bash\n/' "$name"

# make executable
chmod +x "$name"

# pause for pretty stdout
sleep 1.5

# open editor
nvim "$name"
