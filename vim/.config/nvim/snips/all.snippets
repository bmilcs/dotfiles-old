#───────────────────────────────────────────────────────  process lock  ───────

snippet bm-pid-lock-process "pid process locker for scripts"
lockpid="$path/lock.pid"

# duplicate process prevention
exec 9>"$lockpid"
if ! flock -n 9  ; then
	_w "${B}auto-update${YLW} duplicate prevented"
	exit 1
fi
endsnippet

#────────────────────────────────────────────────────────  script path  ───────

snippet bm-basename-of-script "acquire path of script"
shpath="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
endsnippet

snippet bm-loop-through-lines-in-file "loop thru file lines"
while read x; do
	echo "$x"
done <"$filename"
endsnippet

#─────────────────────────────────────────────────  rm duplicate lines  ───────
snippet bm-file-rm-duplicate-lines "deduplication of txt file"
awk '!seen[$0]++' /path/file > /path/newfile
endsnippet

#──────────────────────────────────────────────────────────  date/time  ───────
snippet bm-date.time.sec.unique "2021.10.15-13.56.11"
$(date +%Y.%m.%d-%H.%M.%S)
endsnippet

snippet bm-date_time_sec_unique2 "2021-10_15-13_56-11"
$(date +%Y.%m.%d-%H.%M.%S)
endsnippet

snippet bm-date "2021-10-15"
$(date +%Y-%m-%d)
endsnippet

#───────────────────────────────────  overwrite prevention/unique name  ───────
snippet bm-filename-duplicate-overwrite-prevention "file, file-1, file-2, etc."
name=somefile
if [[ -e $name.ext || -L $name.ext ]] ; then
	i=0
	while [[ -e $name-$i.ext || -L $name-$i.ext ]] ; do
		let i++
	done
	name=$name-$i
fi
endsnippet

#───────────────────────────────────────────────────  script arguments  ───────
snippet bm-argument_parse "check for arguments"
if [[ $# -eq 0 ]]; then
	_e "missing arguments"
	_o "arg 1: example"
	exit 1
elif [[ $# -gt 1 ]]; then
	_e "too many arguments"
	_o "arg 1: example"
	exit 1
fi
endsnippet

#──────────────────────────────	 array  ───────────────────────────────────────
snippet bm-array-template "basic array example"
# declare array
declare -n arrayName=$1

# populate array
for i in $*
do
	arrayName+=("new item $i")
done

# total items in array
echo "Tot items in function: ${#arrayName[@]}"

# loop: array items
for item in "${arrayName[@]}"
do
	echo $item
done
endsnippet

#─────────────────────────	 array: for loop  ─────────────────────────────────
snippet bm-loop-thru-vars-array "for loop, exceptions, install script"
list=("img" "opt" "root")
match=0

for a in "${list[@]}"; do
	[[ $dir == $a ]] && match=1
done
endsnippet

#─────────────────────────		bash substring  ─────────────────────────────────
snippet bm-bash-substring-braces "remove predetermined suffix/prefix"
string="hello-world"
prefix="hell"
suffix="ld"

# remove prefix
foo=${string#"$prefix"}
foo=${foo%"$suffix"}

endsnippet

#────────────────────	 alacritty unique/commands  ─────────────────────────────
snippet bm-alacritty-launch-cmds "launch alacritty, execute command, keep open"
alacritty --class=roficlone --title=roficlone -e $SHELL -c 'cd '$path' && echo && ls -lA && echo && $SHELL'  # works
endsnippet

#─────────────────────────	 rofi: input bar  ─────────────────────────────────
snippet bm-rofi-anyinput "rofi single blank input line"
giturl=$( (echo ) | rofi  -show "" -dmenu -matching fuzzy )
endsnippet

#───────────────────────────	 traps: long   ──────────────────────────────────
snippet bm-traps-short-exit-error "trap command examples"
on_event() {
	_w "something happened"
	_s
	exit 1
}

trap 'on_event' SIGINT # ctrl-c
trap 'on_event' ERR		 # error

# #   sig       definition
#-----------------------------------------
# 0		0					on exit from shell: hang up
# 1		SIGHUP		clean tidyup - controlling terminal has "gone away" - exited
# 2		SIGINT		interrupt: Ctrl+C,DEL
# 3		SIGQUIT		quit
# 6		SIGABRT		abort
# 9		SIGKILL		die now (cannot be trapped)
# 14	SIGALRM		alarm clock
# 15	SIGTERM		terminate
endsnippet

#────────────────────────	 trap: warn ctrl+c  ─────────────────────────────────
snippet "bm-traps-long-examples"
ctrlc_count=0

function no_ctrlc() {
	let ctrlc_count++
	if [[ $ctrlc_count == 1 ]]; then
		echo "Stop that."
	elif [[ $ctrlc_count == 2 ]]; then
		echo "Once more and I quit."
	else
		echo "That's it.  I quit."
		exit
	fi
}
trap no_ctrlc SIGINT

while true
do
		echo Sleeping
		sleep 10
done
endsnippet

#──────────────────────		trap: prevent ctrl-c  ───────────────────────────────
snippet bm-traps-prevent-ctrl-c "prevent cancellation of important cmd"
# run something important, no ctrl-c allowed.
trap "" SIGINT
important_command

# less important stuff from here on out, ctrl-c allowed.
trap - SIGINT
not_so_important_command
endsnippet

#───────────────────────	 printf: right align  ───────────────────────────────
snippet bm-printf-right-align-text "printf: right align" 
printf "%80s\n" "$text"
endsnippet

#──────────────────────────────────────────────────────────────  xclip  ───────
snippet bm-xclip "pipe x to system clipboard"
echo "hi" | xclip -sel clip
endsnippet

snippet bm-regex-substring-cut-example "extract line containing a string"
_o extracting class
class="$(xprop -id "$(xdotool getactivewindow)" \
  | grep -hn "WM_CLASS" \
  | cut -f1 -d"," \
  | cut -f3 -d " " \
  | cut -f2 -d "\"")"
endsnippet

snippet bm-regex-del-all-after-char "delete everything after character"
echo "Hello: world" | cut -f1 -d":"
endsnippet

snippet bm-regex-del-num-of-chars-in-string "remove # of chars from string"
dir=${dir:0:$(( ${#dir}-1 ))}
endsnippet

snippet bm-dotfile-log-sudo "dotfile log debugger"
# dotfile rc file debugging [sudo]
[ -f ~/bin/sys/dotfile_logger ] \
&& . ~/bin/sys/dotfile_logger \
&& dotlog '+ `!v expand('%:p')`'
endsnippet

snippet bm-dotfile-log "dotfile log debugger"
# dotfile rc file debugging
. ~/bin/sys/dotfile_logger
  dotlog '+ `!v expand('%:p')`'
endsnippet

snippet bm-sed-add-new-first-line "add a new line to beginning of a file"
sed -i '1s/^/...\#\!\/usr...\n/' "$filename"
endsnippet

snippet bm-for-each-argument "loop through & print all arguments"
for i in "$@"; do
  echo "$i"
done
endsnippet

snippet bm-rmprefixsuffix "remove suffix/prefix from string"
foo=${string#"$prefix"}
foo=${foo%"$suffix"}
endsnippet

snippet bm-swap-~-$home "swap home w/ ~"
DIR="$(echo $PWD)"
[[ $DIR == *"$HOME"* ]] && SDIR="~"${DIR#$HOME}
endsnippet

snippet bm-path-from-filename "get leading path of a filename"
# realpath $1 # /path/to/file.name
# dirname $1 # .
realpath . # /path/to/current/script
endsnippet

snippet bm-path "full path: current open file"
`!p snip.rv = os.path.abspath(path)`
endsnippet

snippet bm-snippet-filename "basename: open file's name"
`!p snip.rv = snip.basename`
endsnippet

snippet bm-sed-swap-all "swap all occurences in file"
sed -i -e 's/word/new/g' filename
endsnippet

snippet bm-sed-delete_all "delete all occurences in file"
sed -i -e 's/word//g' filename
endsnippet

